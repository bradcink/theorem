// Generated by CoffeeScript 1.7.1

/*
Module dependencies.
 */
var MongoStore, User, VenmoStrategy, Venmo_Callback_URL, Venmo_Client_ID, Venmo_Client_SECRET, app, config, connect, coreRoutes, express, passport, path, request, swig, users_controller;

passport = require("passport");

VenmoStrategy = require("passport-venmo").Strategy;

request = require("request");

swig = require("swig");

users_controller = require("./controllers/users.coffee");

path = require("path");

Venmo_Client_ID = "1911";

Venmo_Client_SECRET = "MP8FPA4TXQB7u6Bd9Q3d8Pnw7dpVBcnU";

Venmo_Callback_URL = "http://localhost:3000/auth/venmo/callback";

User = require('./models/user.coffee')["User"];

connect = require("connect-assets");

express = require("express");

MongoStore = require("connect-mongo")(express);

config = require("./config");

coreRoutes = require("./routes/core");

app = express.createServer();

app.configure(function() {
  app.set("views", __dirname + "/views");
  app.set("view engine", "jade");
  app.set("view options", {
    layout: false
  });
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(express.logger("short"));
  app.use("/lib", express["static"](__dirname + "/../bower_components"));
  app.use(express["static"](__dirname + "/../public"));
  app.use(connect({
    paths: config.less_paths
  }));
  app.use(passport.initialize());
  app.use(passport.session());
  return app.use(app.router);
});

app.configure("development", function() {
  return app.use(express.errorHandler({
    dumpExceptions: true,
    showStack: true
  }));
});

passport.serializeUser(function(user, done) {
  done(null, user);
});

passport.deserializeUser(function(obj, done) {
  done(null, obj);
});

app.configure("production", function() {
  return app.use(express.errorHandler());
});

passport.use(new VenmoStrategy({
  clientID: Venmo_Client_ID,
  clientSecret: Venmo_Client_SECRET,
  callbackURL: Venmo_Callback_URL
}, function(accessToken, refreshToken, venmo, done) {
  User.findOne({
    "venmo.id": venmo.id
  }, function(err, user) {
    if (err) {
      return done(err);
    }
    if (!user) {
      user = new User({
        name: venmo.displayName,
        username: venmo.username,
        email: venmo.email,
        provider: "venmo",
        venmo: venmo._json,
        balance: venmo.balance,
        access_token: accessToken,
        refresh_token: refreshToken
      });
      user.save(function(err) {
        if (err) {
          console.log(err);
        }
        return done(err, user);
      });
    } else {
      user.balance = venmo.balance;
      user.access_token = accessToken;
      user.save();
      user.venmo = venmo._json;
      done(err, user);
    }
  });
}));

coreRoutes(app);

app.get("/auth/venmo", passport.authenticate("venmo", {
  scope: ["make_payments", "access_feed", "access_profile", "access_email", "access_phone", "access_balance", "access_friends"],
  failureRedirect: "/"
}), users_controller.signin);

app.get("/auth/venmo/callback", passport.authenticate("venmo", {
  failureRedirect: "/"
}), users_controller.authCallback);

app.post("/auth/venmo/payment", function(req, res) {
  request.post("https://api.venmo.com/v1/payments", {
    form: req.body
  }, function(e, r, venmo_receipt) {
    venmo_receipt = JSON.parse(venmo_receipt);
    res.render("success", {
      venmo_receipt: venmo_receipt
    });
  });
});

app.listen(config.port, function() {
  return console.log("Express server listening on port %d in %s mode", app.address().port, app.settings.env);
});

module.exports = app;
